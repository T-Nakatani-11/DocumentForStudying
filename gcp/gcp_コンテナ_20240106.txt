・一般的な仮想化
	・物理サーバを仮想化することで、複数の異なるアプリケーションを実行できるようにする技術。
	・物理サーバのリソースを効率よく使える。
	・アプリケーションを実行するためにゲストOSが必要になるため、アプリケーションの起動が遅くなる。

・コンテナ
	・ゲストOSのレイヤーまで仮想化する技術。
	・ゲストOSに依存せずにアプリケーションが実行できる。
		・様々な実行環境に対応
		・デプロイメントが容易
		・テスト環境・本番環境といった異なる環境へのアプリケーションのデプロイが容易
	・アプリケーションの起動が速くなる。
		・仮想マシンに比べて軽量でシンプル。
		・数十ミリ秒で起動
	・アプリケーションに必要なライブラリやミドルウェアを一つのユニットとしてまとめる技術。
	・リソース使用量が少なく、コンピュートリソースを細分化して効率的に利用可能。

・コンテナのユースケース
	・モノリス
		・一枚岩のような大きいシステムのこと
		・内部プログラムが分かれている。
		・内部的には分かれていても同一マシン上ですべての処理が行われる。
		・部分的な更新でもシステム全体を止めなければならない。
	・マイクロサービス
		・それぞれ独立した機能を複数のマシン上で自由に組み合わせることができる。
		・小さな単位を組み合わせてシステムを動かす。
		・個別に開発が進められたり更新ができる。
			・個別の単位をコンテナ化するというケースがある。
			・複数のコンテナを組み合わせて一つのシステムを動かす。

※大きいシステムをクラウド化する際に、機能別にコンテナ化して切り出してクラウド化する。

・コンテナの課題
	・複数のコンテナをどうやって管理する？？
	→Kubernetes

・Kubernetes
	・Googleが開発したオープンソース
	・コンテナ化されたアプリケーションのオーケストレーションシステム。
	・デプロイ、スケーリング、管理を自動化
	・Kubernetesとはギリシャ語で総舵手の意味
	・略称はk8s
